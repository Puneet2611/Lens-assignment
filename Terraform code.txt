Directory Structure

project/
├── main.tf
├── variables.tf
├── output.tf
├── eb-docker-compose.yml
└── app/
    ├── Dockerfile
    └── ...

main.tf


provider "aws" {
  region = "us-west-2"
}

# Elastic Beanstalk Application
resource "aws_elastic_beanstalk_application" "app" {
  name        = "lens-assignment-app"
  description = "Application for Lens Assignment"

  appversion_lifecycle {
    service_role          = aws_iam_role.beanstalk_service_role.arn
    max_count             = 5
    delete_source_from_s3 = true
  }
}

# IAM Role for Elastic Beanstalk
resource "aws_iam_role" "beanstalk_service_role" {
  name               = "beanstalk_service_role"
  assume_role_policy = data.aws_iam_policy_document.beanstalk_assume_role_policy.json
}

data "aws_iam_policy_document" "beanstalk_assume_role_policy" {
  statement {
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["elasticbeanstalk.amazonaws.com"]
    }
  }
}

# Elastic Beanstalk Environment
resource "aws_elastic_beanstalk_environment" "app_env" {
  name                = "lens-assignment-env"
  application         = aws_elastic_beanstalk_application.app.name
  solution_stack_name = "64bit Amazon Linux 2 v3.3.10 running Docker"

  setting {
    namespace = "aws:autoscaling:launchconfiguration"
    name      = "InstanceType"
    value     = "t3.micro"
  }

  setting {
    namespace = "aws:elasticbeanstalk:environment"
    name      = "EnvironmentType"
    value     = "LoadBalanced"
  }

  setting {
    namespace = "aws:autoscaling:asg"
    name      = "MinSize"
    value     = "1"
  }

  setting {
    namespace = "aws:autoscaling:asg"
    name      = "MaxSize"
    value     = "3"
  }

  setting {
    namespace = "aws:elasticbeanstalk:application:environment"
    name      = "PORT"
    value     = "8181"
  }

  setting {
    namespace = "aws:elbv2:loadbalancer"
    name      = "LoadBalancerType"
    value     = "application"
  }
}

#Storing Terraform state remotely
  backend "s3" {
    bucket         = "lens-assignment-terraform-state" # Name your S3 bucket for storing the Terraform state
    key            = "lens-assignment/terraform.tfstate"
    region         = "us-west-2"
    dynamodb_table = "lens-assignment-lock" # DynamoDB table for state locking
    encrypt        = true
  }
}


variables.tf

variable "region" {
  description = "AWS region"
  type        = string
  default     = "us-west-2"
}

variable "app_name" {
  description = "Elastic Beanstalk application name"
  type        = string
  default     = "lens-assignment-app"
}

variable "instance_type" {
  description = "EC2 instance type for the Elastic Beanstalk environment"
  type        = string
  default     = "t3.micro"
}



output.tf

output "beanstalk_environment_url" {
  description = "URL of the Elastic Beanstalk environment"
  value       = aws_elastic_beanstalk_environment.app_env.endpoint_url
}
